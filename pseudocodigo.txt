clase Cartas
	palo, imagen : cadena;
	valor : entero;
	
	metodo cartas()
		palo = ""
		valor = 0
	

	metodo obtenerPalo()
		obtenerPalo = palo

	metodo establecerPalo(cadena palo)
		palo = palo

	metodo obtenerValor()
		obtenerValor = valor

	metodo establecerValor(entero valor)
		establecerValor = valor
	metodo obtenerImagen()
        	obtenerImagen = imagen
    
    
	metodo establecerImagen(cadena img)
        	imagen = img


clase MazoDeCartas
	mazo : arreglo de Cartas[52]
	tope : entero

	metodo MazoDeCartas()
		tope = - 1

	metodo obtenerTope()
		obtenerTope = tope

	metodo estaVacio()
		estaVacio = obtenerTope() == - 1

	metodo estaLleno()
		estaLleno = obtenerTope() == 51

	metodo apilar(Cartas car)
		si(estaLleno() == verdadero) entonces
			tope = tope + 1
			mazo[tope] = car
		Fin si

	metodo generarMazo()
		i, j : entero
		palo, valor, imagen : cadena

		para i=0 hasta 4 hacer
			segun i
				0: palo = "hearts"
			        1: palo = "diamonds"
				2: palo = "clubs"
				3: palo = "spades"
			Fin segun

			para j=1 hasta 14 hacer
				segun j
					1: valor = "aces"
					11: valor = "jack"
					12: valor = "queen"
					13: valor = "king"
					sino: valor = ""+j
				Fin segun

				imagen ="/imagen/Cartas/"+valor+"_"+palo+"_white.png";
				Cartas nueva
				nueva.establecerPalo(palo)
				nueva.establecerValor(j)
				nuevo.establecerImagen(imagen)
				apilar(nueva)
			Fin para
		Fin para

Clase Participante
	nombre, actitud : cadena
	mano : arreglo de Cartas[52]
	decision, rondasGanadas, tope : entero
	sigParticipantes, pareja : Participante 

	Participante()
		nombre = ""
		decision = 0
		tope = -1
		sigParticipantes = null
		pareja = null
		rondasGanadas = 0

	metodo establecerNombre(nom Cadena)
		nombre = nom

	metodo obtenerNombre()
		obtenerNombre = nombre

	metodo establecerSiguiente(Participante par)
		sigParticipantes = par
	
	metodo obtenerSiguiente()
		obtenerSiguiente = sigParticipantes

	metodo establecerPareja(Participante par)
		pareja = par
	metodo obtenerPareja()
		obtenerPareja = pareja

	metodo esBlackjack()
		esBlackjack = sumMano() == 21

	metodo sePaso()
		sePaso = sumMano() > 21

	metodo pedirCarta()
		tope = tope + 1
		mano[tope] = mazo.desapilar()

	metodo sumMano()
		sum : entero 
		sum = 0
		para i=0 hasta tope hacer
			si(mano[i].obtenerValor()>10) entonces
				sum = sum + 10
			sino si(mano[i].obtenerValor()==1)
				sum = sum + 11
			sino
				sum = sum + mano[i].obtenerValor()

			Fin si
		Fin para

		si(sum > 21) entonces
			para i=0 hasta tope hacer
				si(mano[i].obtenerValor()==1) entonces
					sum = sum - 10
				Fin si
			Fin para
		Fin si 
		sumMano = sum

	metodo decidir()
		si(decision == 2)
			pedirCarta()
		Fin si

	metodo establecerActitud(cadena act)
		actitud = act

	metodo obtenerActitud()
		obtenerActitud = actitud

	metodo decidirMaquina()
		segun actitud
			"Reservado": si(sumMano()<15) entonces
					decision = 2
				     sino
					decision = 1
				     Fin si

			"Arriesgado": si(sumMano()<18) entonces
					 
					decision = 2
				     sino
					decision = 1
				     Fin si
		decidirMaquina = decision


	metodo cantidadDeCartas()
		i: entero
		i = 0
		Mientras i<=tope hacer
			i = i + 1
		Fin mientras
		cantidaadDeCartas = i 


	metodo reiniciarValores()
		i: entero
		decision = 0
		tope = -1
		para i=0 hasta 5 hacer
			mano[i] = null
		Fin para


Clase ListaParticipantes
	primero : Participante 
	largo : entero

	metodo ListaParticipantes()
		primero = null
		largo = 0

	metodo estaVacia()
		estaVacia = primero == null

	metodo ingresarAlPrincipio(cadena nombre, cadena actitud)
		Partcipante nuevo 
		nuevo.establecerNombre(nombre)
		nuevo.establecerActitud(actitud)

		si(estaVacia()) entonces
			primero = nuevo
		sino 
			nuevo.establecerSiguiente(primero)
			primero = nuevo
		Fin si
		largo = largo + 1

	metodo ingresarAlfinal(cadena nombre, cadena actitud)
		aux :Participante
		aux = primero
		Participante nuevo
		nuevo.establecerNombre(nombre)
		nuevo.establecerActitud(actitud)
		si(estaVacia()) entonces
			primero = nuevo
		sino
			mientras aux.obtenerSiguiente() != null hacer
				aux = aux.obtenerSiguiente()
			Fin mientras
		Fin si
		largo = largo + 1

	metodo obtenerParticipante(entero indice)
		i : entero
		aux :Participante
		aux = primero
		para i=0 hasta indice hacer 
			aux = aux.obtenerSiguiente()
		Fin para 
		obtenerParticipante = aux.obtenerNombre()

	metodo obtenerParejaParticipante(entero indice)
		i : entero
		aux :Participante
		aux = primero
		para i=0 hasta indice hacer 
			aux = aux.obtenerSiguiente()
		Fin para 
		obtenerParticipante = aux.obtenerPareja()
		
	metodo eliminar(entero indice)
		aux, sigEliminado :Participante
		i : entero
		si(indice == 0) entonces
			primero = primero.obtenerSiguiente()
		sino
			aux = primero
			para i = 0 hasta indice-1 hacer
				aux = aux.obtenerSiguiente()
			Fin para
			sigEliminado = aux.obtenerSiguiente()
			aux.establecerSiguiente(sigEliminado.obtenerSiguiente())
		Fin si
	largo = largo - 1


	metodo partidaSimulada(int i)
		eliminacion : entero
		eliminacion = random(1,3)
		si(eliminacion == 1) entonces
			eliminar(i)
		sino
			eliminar(i+1)
		Fin si 

	metodo total()
		total = largo

	metodo emparejar()
		aux, aux2 :Participante
		aux = primero
		aux2 = null
		mientras aux.obtenerSiguiente() != null hacer
			aux2 = aux
			aux = aux.obtenerSiguiente()
			aux.establecerPareja(aux2)
			aux2.establecerPareja(aux)
			si(aux.obtenerSiguiente() != null) entonces
				aux = aux.obtenerSiguiente()
			Fin si
		Fin mientras
				
		
			
			